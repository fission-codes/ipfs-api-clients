/* 
 * FISSION
 *
 * Easily use IPFS from Web 2.0 applications
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@fission.codes
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct HerokuProvision {
  #[serde(rename = "id")]
  id: ::models::UserId,
  #[serde(rename = "config")]
  config: ::models::UserConfig,
  #[serde(rename = "message")]
  message: Option<String>
}

impl HerokuProvision {
  pub fn new(id: ::models::UserId, config: ::models::UserConfig) -> HerokuProvision {
    HerokuProvision {
      id: id,
      config: config,
      message: None
    }
  }

  pub fn set_id(&mut self, id: ::models::UserId) {
    self.id = id;
  }

  pub fn with_id(mut self, id: ::models::UserId) -> HerokuProvision {
    self.id = id;
    self
  }

  pub fn id(&self) -> &::models::UserId {
    &self.id
  }


  pub fn set_config(&mut self, config: ::models::UserConfig) {
    self.config = config;
  }

  pub fn with_config(mut self, config: ::models::UserConfig) -> HerokuProvision {
    self.config = config;
    self
  }

  pub fn config(&self) -> &::models::UserConfig {
    &self.config
  }


  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> HerokuProvision {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

}



