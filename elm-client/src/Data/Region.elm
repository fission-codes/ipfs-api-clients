{-
   FISSION
   Easily use IPFS from Web 2.0 applications

   OpenAPI spec version: 1.0.0
   Contact: support@fission.codes

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Data.Region exposing (Region(..), regionDecoder, regionEncoder)

import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (decode, optional, required)
import Json.Encode as Encode
import Maybe exposing (map, withDefault)


type Region
    = California
    | Dublin
    | Frankfurt
    | Oregon
    | Singapore
    | Sydney
    | Tokyo
    | Virginia



regionDecoder : Decoder Region
regionDecoder =
    Decode.string
        |> Decode.andThen (\str ->
            case str of
                "california" ->
                    Decode.succeed California

                "dublin" ->
                    Decode.succeed Dublin

                "frankfurt" ->
                    Decode.succeed Frankfurt

                "oregon" ->
                    Decode.succeed Oregon

                "singapore" ->
                    Decode.succeed Singapore

                "sydney" ->
                    Decode.succeed Sydney

                "tokyo" ->
                    Decode.succeed Tokyo

                "virginia" ->
                    Decode.succeed Virginia

                other ->
                    Decode.fail <| "Unknown type: " ++ other
        )


regionEncoder : Region -> Encode.Value
regionEncoder model =
    case model of
        California ->
            Encode.string "california"

        Dublin ->
            Encode.string "dublin"

        Frankfurt ->
            Encode.string "frankfurt"

        Oregon ->
            Encode.string "oregon"

        Singapore ->
            Encode.string "singapore"

        Sydney ->
            Encode.string "sydney"

        Tokyo ->
            Encode.string "tokyo"

        Virginia ->
            Encode.string "virginia"


