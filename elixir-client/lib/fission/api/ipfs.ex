# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule FISSION.Api.IPFS do
  @moduledoc """
  API calls for all endpoints tagged `IPFS`.
  """

  alias FISSION.Connection
  import FISSION.RequestBuilder


  @doc """

  ## Parameters

  - connection (FISSION.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, [%IpfsPeer{}, ...]} on success
  {:error, info} on failure
  """
  @spec ipfs_peers_get(Tesla.Env.client, keyword()) :: {:ok, list(FISSION.Model.IpfsPeer.t)} | {:error, Tesla.Env.t}
  def ipfs_peers_get(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/ipfs/peers")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%FISSION.Model.IpfsPeer{}])
  end

  @doc """

  ## Parameters

  - connection (FISSION.Connection): Connection to server
  - file (String.t): A file to upload (may also be multipart/form-data)
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %FISSION.Model.IpfsAddress{}} on success
  {:error, info} on failure
  """
  @spec ipfs_post(Tesla.Env.client, String.t, keyword()) :: {:ok, FISSION.Model.IpfsAddress.t} | {:error, Tesla.Env.t}
  def ipfs_post(connection, file, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/ipfs")
    |> add_param(:query, :"file", file)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%FISSION.Model.IpfsAddress{})
  end
end
