/**
 * FISSION's IPFS API
 * Easily use IPFS from Web 2.0 applications
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@fission.codes
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/HerokuProvision', 'model/IPFSAddress', 'model/IPFSPeer', 'model/Pong', 'model/ProvisionRequest', 'model/Region', 'model/Secret', 'model/SerializedFile', 'model/Tier', 'model/UUID', 'model/UserConfig', 'model/UserID', 'api/HerokuApi', 'api/IPFSApi', 'api/PingApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/HerokuProvision'), require('./model/IPFSAddress'), require('./model/IPFSPeer'), require('./model/Pong'), require('./model/ProvisionRequest'), require('./model/Region'), require('./model/Secret'), require('./model/SerializedFile'), require('./model/Tier'), require('./model/UUID'), require('./model/UserConfig'), require('./model/UserID'), require('./api/HerokuApi'), require('./api/IPFSApi'), require('./api/PingApi'));
  }
}(function(ApiClient, HerokuProvision, IPFSAddress, IPFSPeer, Pong, ProvisionRequest, Region, Secret, SerializedFile, Tier, UUID, UserConfig, UserID, HerokuApi, IPFSApi, PingApi) {
  'use strict';

  /**
   * Easily_use_IPFS_from_Web_2_0_applications.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var FissionsIpfsApi = require('index'); // See note below*.
   * var xxxSvc = new FissionsIpfsApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new FissionsIpfsApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new FissionsIpfsApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new FissionsIpfsApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The HerokuProvision model constructor.
     * @property {module:model/HerokuProvision}
     */
    HerokuProvision: HerokuProvision,
    /**
     * The IPFSAddress model constructor.
     * @property {module:model/IPFSAddress}
     */
    IPFSAddress: IPFSAddress,
    /**
     * The IPFSPeer model constructor.
     * @property {module:model/IPFSPeer}
     */
    IPFSPeer: IPFSPeer,
    /**
     * The Pong model constructor.
     * @property {module:model/Pong}
     */
    Pong: Pong,
    /**
     * The ProvisionRequest model constructor.
     * @property {module:model/ProvisionRequest}
     */
    ProvisionRequest: ProvisionRequest,
    /**
     * The Region model constructor.
     * @property {module:model/Region}
     */
    Region: Region,
    /**
     * The Secret model constructor.
     * @property {module:model/Secret}
     */
    Secret: Secret,
    /**
     * The SerializedFile model constructor.
     * @property {module:model/SerializedFile}
     */
    SerializedFile: SerializedFile,
    /**
     * The Tier model constructor.
     * @property {module:model/Tier}
     */
    Tier: Tier,
    /**
     * The UUID model constructor.
     * @property {module:model/UUID}
     */
    UUID: UUID,
    /**
     * The UserConfig model constructor.
     * @property {module:model/UserConfig}
     */
    UserConfig: UserConfig,
    /**
     * The UserID model constructor.
     * @property {module:model/UserID}
     */
    UserID: UserID,
    /**
     * The HerokuApi service constructor.
     * @property {module:api/HerokuApi}
     */
    HerokuApi: HerokuApi,
    /**
     * The IPFSApi service constructor.
     * @property {module:api/IPFSApi}
     */
    IPFSApi: IPFSApi,
    /**
     * The PingApi service constructor.
     * @property {module:api/PingApi}
     */
    PingApi: PingApi
  };

  return exports;
}));
