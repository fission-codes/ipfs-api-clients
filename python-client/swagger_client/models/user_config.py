# coding: utf-8

"""
    FISSION

    Easily use IPFS from Web 2.0 applications  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@fission.codes
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.secret import Secret  # noqa: F401,E501


class UserConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interplanetary_fission_url': 'str',
        'interplanetary_fission_username': 'str',
        'interplanetary_fission_password': 'Secret'
    }

    attribute_map = {
        'interplanetary_fission_url': 'INTERPLANETARY_FISSION_URL',
        'interplanetary_fission_username': 'INTERPLANETARY_FISSION_USERNAME',
        'interplanetary_fission_password': 'INTERPLANETARY_FISSION_PASSWORD'
    }

    def __init__(self, interplanetary_fission_url=None, interplanetary_fission_username=None, interplanetary_fission_password=None):  # noqa: E501
        """UserConfig - a model defined in Swagger"""  # noqa: E501

        self._interplanetary_fission_url = None
        self._interplanetary_fission_username = None
        self._interplanetary_fission_password = None
        self.discriminator = None

        self.interplanetary_fission_url = interplanetary_fission_url
        self.interplanetary_fission_username = interplanetary_fission_username
        self.interplanetary_fission_password = interplanetary_fission_password

    @property
    def interplanetary_fission_url(self):
        """Gets the interplanetary_fission_url of this UserConfig.  # noqa: E501


        :return: The interplanetary_fission_url of this UserConfig.  # noqa: E501
        :rtype: str
        """
        return self._interplanetary_fission_url

    @interplanetary_fission_url.setter
    def interplanetary_fission_url(self, interplanetary_fission_url):
        """Sets the interplanetary_fission_url of this UserConfig.


        :param interplanetary_fission_url: The interplanetary_fission_url of this UserConfig.  # noqa: E501
        :type: str
        """
        if interplanetary_fission_url is None:
            raise ValueError("Invalid value for `interplanetary_fission_url`, must not be `None`")  # noqa: E501

        self._interplanetary_fission_url = interplanetary_fission_url

    @property
    def interplanetary_fission_username(self):
        """Gets the interplanetary_fission_username of this UserConfig.  # noqa: E501


        :return: The interplanetary_fission_username of this UserConfig.  # noqa: E501
        :rtype: str
        """
        return self._interplanetary_fission_username

    @interplanetary_fission_username.setter
    def interplanetary_fission_username(self, interplanetary_fission_username):
        """Sets the interplanetary_fission_username of this UserConfig.


        :param interplanetary_fission_username: The interplanetary_fission_username of this UserConfig.  # noqa: E501
        :type: str
        """
        if interplanetary_fission_username is None:
            raise ValueError("Invalid value for `interplanetary_fission_username`, must not be `None`")  # noqa: E501

        self._interplanetary_fission_username = interplanetary_fission_username

    @property
    def interplanetary_fission_password(self):
        """Gets the interplanetary_fission_password of this UserConfig.  # noqa: E501


        :return: The interplanetary_fission_password of this UserConfig.  # noqa: E501
        :rtype: Secret
        """
        return self._interplanetary_fission_password

    @interplanetary_fission_password.setter
    def interplanetary_fission_password(self, interplanetary_fission_password):
        """Sets the interplanetary_fission_password of this UserConfig.


        :param interplanetary_fission_password: The interplanetary_fission_password of this UserConfig.  # noqa: E501
        :type: Secret
        """
        if interplanetary_fission_password is None:
            raise ValueError("Invalid value for `interplanetary_fission_password`, must not be `None`")  # noqa: E501

        self._interplanetary_fission_password = interplanetary_fission_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
