# coding: utf-8

"""
    FISSION

    Easily use IPFS from Web 2.0 applications  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@fission.codes
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.region import Region  # noqa: F401,E501
from swagger_client.models.tier import Tier  # noqa: F401,E501


class ProvisionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'callback_url': 'str',
        'name': 'str',
        'plan': 'Tier',
        'region': 'Region',
        'uuid': 'str'
    }

    attribute_map = {
        'callback_url': 'callbackUrl',
        'name': 'name',
        'plan': 'plan',
        'region': 'region',
        'uuid': 'uuid'
    }

    def __init__(self, callback_url=None, name=None, plan=None, region=None, uuid=None):  # noqa: E501
        """ProvisionRequest - a model defined in Swagger"""  # noqa: E501

        self._callback_url = None
        self._name = None
        self._plan = None
        self._region = None
        self._uuid = None
        self.discriminator = None

        self.callback_url = callback_url
        self.name = name
        self.plan = plan
        self.region = region
        self.uuid = uuid

    @property
    def callback_url(self):
        """Gets the callback_url of this ProvisionRequest.  # noqa: E501


        :return: The callback_url of this ProvisionRequest.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this ProvisionRequest.


        :param callback_url: The callback_url of this ProvisionRequest.  # noqa: E501
        :type: str
        """
        if callback_url is None:
            raise ValueError("Invalid value for `callback_url`, must not be `None`")  # noqa: E501

        self._callback_url = callback_url

    @property
    def name(self):
        """Gets the name of this ProvisionRequest.  # noqa: E501


        :return: The name of this ProvisionRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProvisionRequest.


        :param name: The name of this ProvisionRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def plan(self):
        """Gets the plan of this ProvisionRequest.  # noqa: E501


        :return: The plan of this ProvisionRequest.  # noqa: E501
        :rtype: Tier
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this ProvisionRequest.


        :param plan: The plan of this ProvisionRequest.  # noqa: E501
        :type: Tier
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")  # noqa: E501

        self._plan = plan

    @property
    def region(self):
        """Gets the region of this ProvisionRequest.  # noqa: E501


        :return: The region of this ProvisionRequest.  # noqa: E501
        :rtype: Region
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ProvisionRequest.


        :param region: The region of this ProvisionRequest.  # noqa: E501
        :type: Region
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def uuid(self):
        """Gets the uuid of this ProvisionRequest.  # noqa: E501


        :return: The uuid of this ProvisionRequest.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ProvisionRequest.


        :param uuid: The uuid of this ProvisionRequest.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProvisionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvisionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
